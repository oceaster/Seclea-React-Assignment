{"version":3,"sources":["reportWebVitals.ts","serviceWorkerRegistration.ts","assets/logo.svg","library/fetchAPI.tsx","apps/User.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","data","uuid","name","small","logo","large","fetchData","callback","fetch","resp","json","user","results","login","username","picture","medium","User","useState","noData","setUser","size","setSize","image","setImage","newUser","newData","id","className","style","backgroundImage","animation","onClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wJAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,gBCjBpB,MAA0B,iCCEnCC,EAAO,CACXC,KAAM,cACNC,KAAM,UACNC,MAAOC,EACPC,MAAOD,GAiBME,EAdG,SAACC,GAWjB,OAVAC,MAAM,6BAA6BnB,MAAK,SAAAoB,GACxCA,EAAKC,OAAOrB,MAAK,SAAAW,GACb,IAAMW,EAAOX,EAAKY,QAAQ,GAK1B,OAJAZ,EAAKC,KAAOU,EAAKE,MAAMZ,KACvBD,EAAKE,KAAOS,EAAKE,MAAMC,SACvBd,EAAKG,MAAQQ,EAAKI,QAAQC,OAC1BhB,EAAKK,MAAQM,EAAKI,QAAQV,MACnBE,EAASP,SAGbA,G,eCqCMiB,EArDF,WAAO,IAAD,EACOC,mBAASC,GADhB,mBACVR,EADU,KACJS,EADI,OAEOF,mBAAS,YAFhB,mBAEVG,EAFU,KAEJC,EAFI,OAGSJ,mBAASC,EAAOhB,OAHzB,mBAGVoB,EAHU,KAGHC,EAHG,KAKXC,EAAU,SAACC,GACfJ,EAAQ,YACRF,EAAQM,GACRF,EAASE,EAAQvB,QAqBnB,OAAO,sBAAKwB,GAAG,iBAAR,UACL,qBACEA,GAAG,WACHC,UAAWP,EACXQ,MAAO,CACLC,gBAAgB,OAAD,OAASP,EAAT,KACfQ,UAVAR,IAAUJ,EAAOhB,MAAc,8BACvB,QAWV6B,QA1Be,WACJ,aAATX,GACFG,EAASb,EAAKN,OACdiB,EAAQ,oBAGRA,EAAQ,YACRE,EAASb,EAAKR,WAsBhB,mBAAGwB,GAAG,YAAN,SAAmBhB,EAAKT,OACxB,mBAAGyB,GAAG,YAAN,SAAmBhB,EAAKV,OAExB,wBACE0B,GAAG,YACHK,QAvBoB,kBAAMZ,EAAQd,EAAUmB,KAqB9C,oBAKA,uECvCJQ,IAASC,OACP,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,SJmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAACmD,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YIlH5B3D,K","file":"static/js/main.7ba9d0ce.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from '../assets/logo.svg';\n\nconst data = {\n  uuid: 'xxx-xxx-xxx',\n  name: 'No User',\n  small: logo,\n  large: logo,\n}\n\nconst fetchData = (callback: Function) => {\n  fetch('https://randomuser.me/api').then(resp => {\n  resp.json().then(data => {\n      const user = data.results[0];\n      data.uuid = user.login.uuid;\n      data.name = user.login.username;\n      data.small = user.picture.medium;\n      data.large = user.picture.large;\n      return callback(data);\n    })\n  })\n  return data;\n}\n\nexport default fetchData;\nexport { data };\n","import { useState } from 'react';\nimport fetchData, { data as noData } from '../library/fetchAPI';\nimport \"./User.css\";\n\nconst User = () => {\n  const [user, setUser] = useState(noData);\n  const [size, setSize] = useState('user-img');\n  const [image, setImage] = useState(noData.small);\n\n  const newUser = (newData: any) => {\n    setSize('user-img')\n    setUser(newData)\n    setImage(newData.small)\n  }\n\n  const toggleSize = () => {\n    if (size === 'user-img') {\n      setImage(user.large)\n      setSize('user-img-large')\n    }\n    else {\n      setSize('user-img')\n      setImage(user.small)\n    }\n  }\n\n  const nextUserPressed = () => setUser(fetchData(newUser))\n\n  const imageAnimation = () => {\n    if (image === noData.small) return 'spin 6500ms linear infinite'\n    else return 'none'\n  }\n\n  return <div id=\"user-container\">\n    <div\n      id=\"user-img\"\n      className={size}\n      style={{\n        backgroundImage: `url(${image})`,\n        animation: imageAnimation()\n      }}\n      onClick={toggleSize}\n    />\n\n    <p id=\"user-name\">{user.name}</p>\n    <p id=\"user-uuid\">{user.uuid}</p>\n\n    <button\n      id=\"user-next\"\n      onClick={nextUserPressed}\n    > Next </button>\n\n    <h6> click image to enlarge/minimize </h6>\n\n  </div>\n};\n\nexport default User;\n","// NODE MODULE IMPORTS\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// LOCAL REQUIREMENTS\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n// APPLICATION IMPORTS\nimport './index.css';\nimport User from './apps/User';\n\n// INDEX\nReactDOM.render(\n  <div className=\"App\">\n    <User/>\n  </div>,\n  document.getElementById('root')\n);\n\n// SERVICE WORKER\nserviceWorkerRegistration.unregister();\n\n// WEB VITALS\nreportWebVitals();\n"],"sourceRoot":""}